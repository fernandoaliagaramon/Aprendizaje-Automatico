close all;
%% Cargar los datos
datos = load('CochesTrain.txt');
ydatos = datos(:, 1);   % Precio en Euros
Xdatos = datos(:, 2:4); % Años, Km, CV
x1dibu = linspace(min(Xdatos(:,1)), max(Xdatos(:,1)), 100)'; %para dibujar

datos2 = load('CochesTest.txt');
ytest = datos2(:,1);  % Precio en Euros
Xtest = datos2(:,2:4); % Años, Km, CV
Ntest = length(ytest);


% Ejercicio 2 - Seleccion del grado del polinomio para la antigüedad del
% coche

fprintf('\nEjercicio 2 - Seleccion del grado del polinomio para la antigüedad del coche\n');
fprintf('\nInicio algoritmo k-fold\n\n');

% Buscamos el mejor grado del polinomio dejando fijos los kilometros y la
% potencia (grado 1)
[ mejor_tam, mejor_error ] = kfold ( 10, 10 , Xdatos, ydatos);

% Volvemos a entrenar con los datos de test. Calculamos el error RMSE.
[Xn2] = expandir (Xdatos, [mejor_tam 1 1]);
[ Xn, mu, sig ] = normalizar( Xn2 );
h = Xn\ydatos
[ wdes ] = desnormalizar( h, mu, sig );
[Xt] = expandir (Xtest, [mejor_tam 1 1]);
error1 = RMSE (wdes, Xt, ytest);
fprintf('\nError RMSE con datos de test = %d\n', error1);
fprintf('\nPulsar ENTER para seguir con el ejercicio 3\n\n');
pause;

%% Ejercicio 3 - Seleccion del grado del polinomio para los kilometros

fprintf('\nEjercicio 3 - Seleccion del grado del polinomio para los kilometros\n');
fprintf('\nInicio algoritmo k-fold\n\n');

% Buscamos el mejor grado del polinomio dejando fija la antigüedad y la
% potencia (mejor_tam, 1)
[ mejor_tam2, mejor_error ] = kfold2 ( 10, 10 , Xdatos, ydatos, mejor_tam);

% Volvemos a entrenar con los datos de test. Calculamos el error RMSE.

[Xn3] = expandir (Xdatos, [mejor_tam mejor_tam2 1]);
[ Xn, mu, sig ] = normalizar( Xn3 );
h = Xn\ydatos;
[ wdes ] = desnormalizar( h, mu, sig );
[Xt2] = expandir (Xtest, [mejor_tam mejor_tam2 1]);
error2 = RMSE (wdes, Xt2, ytest);
fprintf('\nError RMSE con datos de test = %d\n', error2);
fprintf('\nPulsar ENTER para seguir con el ejercicio 4\n\n');

pause;

%% Ejercicio 4 - Regularizacion

[ mejor_lambda, mejor_error ] = regularizacion ( 10, 10 , Xdatos, ydatos);

[Xn4] = expandir (Xdatos, [10 5 5]);
[ Xn, mu, sig ] = normalizar( Xn4 );
[nrows,ncols] = size(Xn);
h = Xn'*Xn + ()*diag([0 ones(1,ncols-1)]);
theta = h \ (Xn'*ydatos);
[ wdes ] = desnormalizar( theta, mu, sig );
[Xt4] = expandir (Xtest, [10 5 5]);
error3 = RMSE (wdes, Xt4, ytest);

fprintf('\nError RMSE con datos de test = %d\n', error3);

fprintf('\nComparativa errores:\n');
fprintf('Error RMSE (2) = %d\n', error1);
fprintf('Error RMSE (3) = %d\n', error2);
fprintf('Error RMSE (4) = %d\n', error3);
